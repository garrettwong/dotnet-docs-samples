/*
 * Copyright (c) 2020 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

using CommandLine;
using System.Collections.Generic;

namespace GoogleCloudSamples
{
    internal abstract class BaseOptions
    {
        [Value(0, HelpText = "Your Google Cloud Project ID.", Required = true)]
        public string ProjectId { get; set; }
    }

    [Verb("autoCompleteJobTitle", HelpText = "Complete job title given partial text (autocomplete).")]
    internal class AutoCompleteJobTitleOptions : BaseOptions
    {
        [Value(1, HelpText = "Your Unique Identifier for Tenant.", Required = true)]
        public string TenantId { get; set; }
        [Value(2, HelpText = "Your Filter.", Required = true)]
        public string Query { get; set; }
    }


    [Verb("createTenant", HelpText = "Create Tenant for scoping resources, e.g. companies and jobs.")]
    internal class CreateTenantOptions : BaseOptions
    {
        [Value(1, HelpText = "Your Unique Identifier for Tenant.", Required = true)]
        public string TenantExternalId { get; set; }
    }

    [Verb("createCompany", HelpText = "Create a Company.")]
    internal class CreateCompanyOptions : BaseOptions
    {
        [Value(1, HelpText = "Your Tenant ID.", Required = true)]
        public string TenantId { get; set; }
        [Value(2, HelpText = "Your Company Name.", Required = true)]
        public string DisplayName { get; set; }
        [Value(3, HelpText = "Identifier of this company in my system.", Required = true)]
        public string CompanyExternalId { get; set; }
    }

    [Verb("createClientEvent", HelpText = "Create a client event.")]
    internal class CreateClientEventOptions : BaseOptions
    {
        [Value(1, HelpText = "Your Tenant ID.", Required = true)]
        public string TenantId { get; set; }
        [Value(2, HelpText = "Your request ID. Value should be set to the request_id from an API response.", Required = true)]
        public string RequestId { get; set; }
        [Value(3, HelpText = "Your event ID. A unique identifier, generated by the client application.", Required = true)]
        public string EventId { get; set; }

        [Value(4, HelpText = "Your event ID. A unique identifier, generated by the client application.", Required = true)]
        public IEnumerable<string> JobIDs { get; set; }
    }


    [Verb("createJob", HelpText = "Create Job.")]
    internal class CreateJobOptions : BaseOptions
    {
        [Value(1, HelpText = "Your Tenant ID.", Required = true)]
        public string TenantId { get; set; }

        [Value(2, HelpText = "Your Company ID.", Required = true)]
        public string CompanyId { get; set; }

        [Value(3, HelpText = "Job requisition ID, aka Posting ID. Unique per job.", Required = true)]
        public string RequisitionId { get; set; }

        [Value(4, HelpText = "The URL of the job application page.", Required = true)]
        public string JobApplicationUrl { get; set; }
    }

    [Verb("createJobCustomAttributes", HelpText = "Create Job with Custom Attributes.")]
    internal class CreateJobCustomAttributesOptions : BaseOptions
    {
        [Value(1, HelpText = "Your Tenant ID.", Required = true)]
        public string TenantId { get; set; }

        [Value(2, HelpText = "Your Company ID.", Required = true)]
        public string CompanyId { get; set; }

        [Value(3, HelpText = "Job requisition ID, aka Posting ID. Unique per job.", Required = true)]
        public string RequisitionId { get; set; }
    }

    [Verb("customRankingSearchJobs", HelpText = "Search Jobs using custom rankings.")]
    internal class CustomRankingSearchOptions : BaseOptions
    {
        [Value(1, HelpText = "Your Tenant ID.", Required = true)]
        public string TenantId { get; set; }
    }

    [Verb("commuteSearchJobs", HelpText = "Search Jobs using commute distance.")]
    internal class CommuteSearchJobsOptions : BaseOptions
    {
        [Value(1, HelpText = "Your Tenant ID.", Required = true)]
        public string TenantId { get; set; }
    }

    [Verb("getTenant", HelpText = "Retrieve Tenant by ID.")]
    internal class GetTenantOptions : BaseOptions
    {
        [Value(1, HelpText = "Your Tenant ID.", Required = true)]
        public string TenantId { get; set; }
    }

    [Verb("getJob", HelpText = "Retrieve Job by ID.")]
    internal class GetJobOptions : BaseOptions
    {
        [Value(1, HelpText = "Your Tenant ID.", Required = true)]
        public string TenantId { get; set; }
        [Value(2, HelpText = "Your Job ID.", Required = true)]
        public string JobId { get; set; }
    }


    [Verb("deleteTenant", HelpText = "Delete Tenant by ID.")]
    internal class DeleteTenantOptions : BaseOptions
    {
        [Value(1, HelpText = "Your Tenant ID.", Required = true)]
        public string TenantId { get; set; }
    }

    [Verb("deleteCompany", HelpText = "Delete Company by ID.")]
    internal class DeleteCompanyOptions : BaseOptions
    {
        [Value(1, HelpText = "Your Tenant ID.", Required = true)]
        public string TenantId { get; set; }
        [Value(2, HelpText = "Your Company ID", Required = true)]
        public string CompanyId { get; set; }
    }

    [Verb("deleteJob", HelpText = "Delete Job by ID.")]
    internal class DeleteJobOptions : BaseOptions
    {
        [Value(1, HelpText = "Your Tenant ID.", Required = true)]
        public string TenantId { get; set; }
        [Value(2, HelpText = "Your Job ID", Required = true)]
        public string JobId { get; set; }
    }

    [Verb("listTenants", HelpText = "List Tenants in the project.")]
    internal class ListTenantsOptions : BaseOptions
    {
    }

    [Verb("getCompany", HelpText = "Retrieve a company by ID.")]
    internal class GetCommpanyOptions : BaseOptions
    {
        [Value(1, HelpText = "Your Tenant ID.", Required = true)]
        public string TenantId { get; set; }

        [Value(2, HelpText = "Your Company ID.", Required = true)]
        public string CompanyId { get; set; }
    }

    [Verb("histogramSearchJobs", HelpText = "Search Jobs with histogram queries.")]
    internal class HistogramSearchJobsOptions : BaseOptions
    {
        [Value(1, HelpText = "Your Tenant ID.", Required = true)]
        public string TenantId { get; set; }

        [Value(2, HelpText = "Your Company ID.", Required = true)]
        public string Query { get; set; }
    }

    [Verb("listCompanies", HelpText = "List Companies in the project.")]
    internal class ListCompaniesOptions : BaseOptions
    {
        [Value(1, HelpText = "Your Tenant ID.", Required = true)]
        public string TenantId { get; set; }
    }


    [Verb("listJobs", HelpText = "List Jobs in the project.")]
    internal class ListJobsOptions : BaseOptions
    {
        [Value(1, HelpText = "Your Tenant ID.", Required = true)]
        public string TenantId { get; set; }

        [Value(2, HelpText = "Your Filter for listing jobs.", Required = true)]
        public string Filter { get; set; }
    }

    public class JobSearch
    {
        public static int Main(string[] args)
        {
            var verbMap = new VerbMap<object>();
            verbMap
                .Add((ListTenantsOptions opts) => ListTenantsSample.ListTenants(
                    opts.ProjectId))
                .Add((CreateCompanyOptions opts) => CreateCompanySample.CreateCompany(opts.ProjectId, opts.TenantId,
                        opts.DisplayName, opts.CompanyExternalId))
                .Add((GetCommpanyOptions opts) => GetCompanySample.GetCompany(opts.ProjectId, opts.TenantId, opts.CompanyId))
                .Add((ListCompaniesOptions opts) => ListCompaniesSample.ListCompanies(opts.ProjectId, opts.TenantId))
                .Add((CreateTenantOptions opts) => CreateTenantSample.CreateTenant(opts.ProjectId, opts.TenantExternalId))
                .Add((GetTenantOptions opts) => GetTenantSample.GetTenant(opts.ProjectId, opts.TenantId))
                .Add((DeleteTenantOptions opts) => DeleteTenantSample.DeleteTenant(opts.ProjectId, opts.TenantId))
                .Add((DeleteCompanyOptions opts) => DeleteCompanySample.DeleteCompany(opts.ProjectId, opts.TenantId, opts.CompanyId))
                .Add((CreateJobOptions opts) => CreateJobSample.CreateJob(opts.ProjectId, opts.TenantId, opts.CompanyId, opts.RequisitionId, opts.JobApplicationUrl))
                .Add((ListJobsOptions opts) => ListJobsSample.ListJobs(opts.ProjectId, opts.TenantId, opts.Filter))
                .Add((GetJobOptions opts) => GetJobSample.GetJob(opts.ProjectId, opts.TenantId, opts.JobId))
                .Add((DeleteJobOptions opts) => DeleteJobSample.DeleteJob(opts.ProjectId, opts.TenantId, opts.JobId))
                .Add((CreateClientEventOptions opts) => CreateClientEventSample.CreateClientEvent(opts.ProjectId, opts.TenantId, opts.RequestId, opts.EventId, opts.JobIDs))
                .Add((CreateJobCustomAttributesOptions opts) => CreateJobCustomAttributesSample.CreateJobCustomAttributes(opts.ProjectId, opts.TenantId, opts.CompanyId, opts.RequisitionId))
                .Add((CustomRankingSearchOptions opts) => CustomRankingSearchSample.CustomRankingSearch(opts.ProjectId, opts.TenantId))
                .Add((CommuteSearchJobsOptions opts) => CommuteSearchJobsSample.CommuteSearchJobs(opts.ProjectId, opts.TenantId))
                .Add((HistogramSearchJobsOptions opts) => HistogramSearch.HistogramSearchJobs(opts.ProjectId, opts.TenantId, opts.Query))
                .Add((AutoCompleteJobTitleOptions opts) => AutoCompleteJobTitleSample.CompleteQuery(opts.ProjectId, opts.TenantId, opts.Query))
                .NotParsedFunc = (err) => 1;
            return (int)verbMap.Run(args);
        }
    }
}
